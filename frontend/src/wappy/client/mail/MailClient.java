package wappy.client.mail;import com.google.gwt.user.client.Window;import com.google.gwt.event.dom.client.ClickHandler;import com.google.gwt.event.dom.client.ClickEvent;import com.google.gwt.user.client.ui.Widget;import com.google.gwt.user.client.ui.LazyPanel;import com.google.gwt.user.client.ui.VerticalPanel;import com.google.gwt.user.client.ui.HorizontalPanel;import com.google.gwt.user.client.ui.HorizontalSplitPanel;import com.google.gwt.user.client.ui.VerticalSplitPanel;import com.google.gwt.user.client.ui.DecoratorPanel;import com.google.gwt.user.client.ui.DockPanel;import com.google.gwt.user.client.ui.Tree;import com.google.gwt.user.client.ui.TreeItem;import com.google.gwt.user.client.ui.DialogBox;import com.google.gwt.user.client.ui.Button;import com.google.gwt.user.client.ui.HTML;import com.google.gwt.json.client.JSONArray;import com.google.gwt.json.client.JSONException;import com.google.gwt.json.client.JSONNumber;import com.google.gwt.json.client.JSONObject;import com.google.gwt.json.client.JSONParser;import com.google.gwt.json.client.JSONString;import com.google.gwt.json.client.JSONValue;import com.google.gwt.http.client.Request;import com.google.gwt.http.client.RequestBuilder;import com.google.gwt.http.client.RequestCallback;import com.google.gwt.http.client.RequestException;import com.google.gwt.http.client.Response;import com.google.gwt.http.client.URL;import com.pathf.gwt.util.json.client.JSONWrapper;public class MailClient extends LazyPanel {    private static class MyDialog extends DialogBox {        public MyDialog() {            setText("Mail Account");            center();            Button save = new Button("Save", new ClickHandler() {                public void onClick(ClickEvent event) {                    MyDialog.this.hide();                }            });            Button cancel = new Button("Cancel", new ClickHandler() {                public void onClick(ClickEvent event) {                    MyDialog.this.hide();                }            });                        HorizontalPanel hp = new HorizontalPanel();            hp.add(save);            hp.add(cancel);            setWidget(hp);        }    }    DockPanel root = new DockPanel();    HorizontalSplitPanel hsp = new HorizontalSplitPanel();    VerticalSplitPanel vsp = new VerticalSplitPanel();    HorizontalPanel toolbar = new HorizontalPanel();    Tree navigation = new Tree();    protected Widget createWidget() {        vsp.setTopWidget(new HTML("MailBox Content"));        vsp.setBottomWidget(new HTML("Mail Content"));        vsp.setSize("100%", "100%");        vsp.setSplitPosition("40%");        hsp.setLeftWidget(navigation);        hsp.setRightWidget(vsp);        hsp.setSize("100%", "100%");        hsp.setSplitPosition("20%");        hsp.addStyleName("wappy-mail-browser");        Button b = new Button("Add Account", new ClickHandler() {            public void onClick(ClickEvent event) {                new MyDialog().show();            }        });        toolbar.setSpacing(4);        toolbar.add(b);        root.add(toolbar, DockPanel.NORTH);        root.add(hsp, DockPanel.CENTER);        root.setSize("100%", "100%");        root.setCellHeight(toolbar, "24px");        loadNavigationTree();        return root;    }    private void loadNavigationTree() {        navigation.clear();        RequestBuilder builder =            new RequestBuilder(RequestBuilder.POST, "/mail/folders/");        try {            builder.sendRequest("", new RequestCallback() {                public void onError(Request request, Throwable exception) {                }                public void onResponseReceived(Request request,                                               Response response) {                    if (response.getStatusCode() != 200) return;                    JSONWrapper root = new JSONWrapper(                        JSONParser.parse(response.getText()));                    JSONWrapper result = root.get("result");                    buildNavigationTree(result, null);                    if (navigation.getItemCount() == 0) {                        new MyDialog().show();                    }                }            });        }        catch (RequestException e) {        }    }    private void buildNavigationTree(JSONWrapper tree, TreeItem node) {        if (node == null) {            for (int i = 0; i < tree.size(); i++) {                TreeItem next = navigation.addItem(                    tree.get(i).get("name").stringValue());                buildNavigationTree(tree.get(i).get("childs"), next);            }        }        else {            for (int i = 0; i < tree.size(); i++) {                TreeItem next = node.addItem(                    tree.get(i).get("name").stringValue());                buildNavigationTree(tree.get(i).get("childs"), next);            }        }    }}