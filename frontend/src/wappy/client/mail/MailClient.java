package wappy.client.mail;import com.google.gwt.event.dom.client.ClickHandler;import com.google.gwt.event.dom.client.ClickEvent;import com.google.gwt.user.client.ui.HorizontalPanel;//import com.google.gwt.user.client.ui.Button;import com.google.gwt.user.client.Command;import com.extjs.gxt.ui.client.Style.LayoutRegion;import com.extjs.gxt.ui.client.util.Margins;import com.extjs.gxt.ui.client.widget.ContentPanel;import com.extjs.gxt.ui.client.widget.LayoutContainer;import com.extjs.gxt.ui.client.widget.layout.BorderLayout;import com.extjs.gxt.ui.client.widget.layout.BorderLayoutData;import com.extjs.gxt.ui.client.widget.layout.FitLayout;import com.extjs.gxt.ui.client.widget.Info;import com.extjs.gxt.ui.client.widget.toolbar.ToolBar;import com.extjs.gxt.ui.client.widget.button.Button;import com.extjs.gxt.ui.client.event.ButtonEvent;import com.extjs.gxt.ui.client.event.SelectionListener;import com.google.gwt.http.client.RequestBuilder;import com.google.gwt.http.client.RequestCallback;import com.google.gwt.http.client.RequestException;import com.google.gwt.http.client.Request;import com.google.gwt.http.client.Response;import com.google.gwt.json.client.JSONParser;import com.google.gwt.json.client.JSONObject;import com.google.gwt.json.client.JSONString;import com.pathf.gwt.util.json.client.JSONWrapper;public class MailClient extends LayoutContainer {    private ToolBar toolbar = new ToolBar();    private MessageView messageView;    private MessageList messageList;    private FolderTree folderTree;    public MailClient() {        final BorderLayout layout = new BorderLayout();        setLayout(layout);        messageView = new MessageView();        messageList = new MessageList(messageView);        folderTree = new FolderTree(messageList);        toolbar.setSpacing(4);                Button sync = new Button("Syncronize",            new SelectionListener<ButtonEvent>() {            public void componentSelected(ButtonEvent ce) {                syncronize();            }        });        toolbar.add(sync);        Button send = new Button("Send Mail",            new SelectionListener<ButtonEvent>() {            public void componentSelected(ButtonEvent ce) {                new SendMailDialog().show();            }        });        toolbar.add(send);        Button addAccount = new Button("Add Account",            new SelectionListener<ButtonEvent>() {            public void componentSelected(ButtonEvent ce) {                new AccountDialog(new Command() {                    public void execute() {                        folderTree.refresh();                    }                }).show();            }        });        toolbar.add(addAccount);        // Create Center Panel With Message List And Message View        LayoutContainer lc = new LayoutContainer();        final BorderLayout bc = new BorderLayout();        lc.setLayout(bc);        BorderLayoutData wd = new BorderLayoutData(LayoutRegion.NORTH, 200);          wd.setSplit(true);          wd.setCollapsible(true);          wd.setMargins(new Margins(0));        BorderLayoutData cd = new BorderLayoutData(LayoutRegion.CENTER);          cd.setMargins(new Margins(0));                lc.add(messageList, wd);        lc.add(messageView, cd);        // Create High Level Layout        BorderLayoutData northData =            new BorderLayoutData(LayoutRegion.NORTH, 28);          northData.setCollapsible(false);          northData.setFloatable(true);          northData.setHideCollapseTool(true);          northData.setSplit(false);          northData.setMargins(new Margins(0));          BorderLayoutData westData =            new BorderLayoutData(LayoutRegion.WEST, 200);          westData.setSplit(true);          westData.setCollapsible(true);          westData.setMargins(new Margins(4));          BorderLayoutData centerData =            new BorderLayoutData(LayoutRegion.CENTER);          centerData.setMargins(new Margins(4, 0, 4, 0));          add(toolbar, northData);        add(folderTree, westData);          add(lc, centerData);    }    public void syncronize() {        RequestBuilder builder = new RequestBuilder(RequestBuilder.POST,            "/mail/synchronize/");        try {            builder.sendRequest("", new RequestCallback() {                public void onError(Request request, Throwable exception) {                    // @todo: Info.display("", "");                }                public void onResponseReceived(Request request,                                               Response response) {                    if (response.getStatusCode() != 200) return;                    JSONWrapper root = new JSONWrapper(                        JSONParser.parse(response.getText()));                                        if (root.get("error").isNull()) {                        Info.display("Synchronization completed",                            "All mail folders synchronized successfully!");                        messageList.refresh();                    }                }            });        }        catch (RequestException e) {            // @todo: Info.display("", "");        }    }}