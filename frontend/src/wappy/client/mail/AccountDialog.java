package wappy.client.mail;import com.extjs.gxt.ui.client.Style.HorizontalAlignment;import com.extjs.gxt.ui.client.event.ButtonEvent;import com.extjs.gxt.ui.client.event.SelectionListener;import com.extjs.gxt.ui.client.widget.MessageBox;import com.extjs.gxt.ui.client.widget.button.Button;import com.extjs.gxt.ui.client.widget.form.FormPanel;import com.extjs.gxt.ui.client.widget.form.TextField;import com.extjs.gxt.ui.client.widget.form.NumberField;import com.extjs.gxt.ui.client.widget.Window;import com.google.gwt.user.client.Command;import com.google.gwt.user.client.DeferredCommand;import com.google.gwt.json.client.JSONObject;import com.google.gwt.json.client.JSONString;import com.pathf.gwt.util.json.client.JSONWrapper;import wappy.client.SimpleJSON;public class AccountDialog {    final Command onAccountCreated;    final Window window = new Window();    final FormPanel formPanel = new FormPanel();    final TextField<String> nameField = new TextField<String>();    final TextField<String> imapAddressField = new TextField<String>();    final NumberField imapPortField = new NumberField();    final TextField<String> imapUsernameField = new TextField<String>();    final TextField<String> imapPasswordField = new TextField<String>();    final TextField<String> smtpAddressField = new TextField<String>();    final NumberField smtpPortField = new NumberField();    final TextField<String> smtpUsernameField = new TextField<String>();    final TextField<String> smtpPasswordField = new TextField<String>();    public AccountDialog(Command onAccountCreated) {        this.onAccountCreated = onAccountCreated;        window.setHeading("Mail Account");        window.setPlain(false);        window.setWidth(350);        window.setAutoHeight(true);        window.setResizable(false);		window.setModal(true);		window.setBlinkModal(true);        window.hide();		formPanel.setHeaderVisible(false);        formPanel.setButtonAlign(HorizontalAlignment.CENTER);        window.add(formPanel);		nameField.setFieldLabel("Account name");		nameField.setToolTip("Enter an account name");		nameField.setEmptyText("Enter an account name");		nameField.setAllowBlank(false);		formPanel.add(nameField);		imapAddressField.setFieldLabel("IMAP server address");		imapAddressField.setToolTip("Enter address of the IMAP server");		imapAddressField.setEmptyText("Enter address of the IMAP server");		imapAddressField.setAllowBlank(false);		formPanel.add(imapAddressField);		imapPortField.setFieldLabel("IMAP server port");		imapPortField.setToolTip("Enter port of the IMAP server");		imapPortField.setEmptyText("Enter port of the IMAP server");		imapPortField.setAllowBlank(false);		imapPortField.setAllowDecimals(false);		imapPortField.setAllowNegative(false);		formPanel.add(imapPortField);		imapUsernameField.setFieldLabel("IMAP username");		imapUsernameField.setToolTip("Enter IMAP username");		imapUsernameField.setEmptyText("Enter IMAP username");		imapUsernameField.setAllowBlank(false);		formPanel.add(imapUsernameField);		imapPasswordField.setFieldLabel("IMAP password");		imapPasswordField.setToolTip("Enter IMAP password");		imapPasswordField.setEmptyText("Enter IMAP password");		imapPasswordField.setAllowBlank(false);        imapPasswordField.setPassword(true);		formPanel.add(imapPasswordField);		smtpAddressField.setFieldLabel("SMTP server address");		smtpAddressField.setToolTip("Enter address of the SMTP server");		smtpAddressField.setEmptyText("Enter address of the SMTP server");		smtpAddressField.setAllowBlank(false);		formPanel.add(smtpAddressField);		smtpPortField.setFieldLabel("SMTP server port");		smtpPortField.setToolTip("Enter port of the SMTP server");		smtpPortField.setEmptyText("Enter port of the SMTP server");		smtpPortField.setAllowBlank(false);		smtpPortField.setAllowDecimals(false);		smtpPortField.setAllowNegative(false);		formPanel.add(smtpPortField);		smtpUsernameField.setFieldLabel("SMTP username");		smtpUsernameField.setToolTip("Enter SMTP username");		smtpUsernameField.setEmptyText("Enter SMTP username");		smtpUsernameField.setAllowBlank(false);		formPanel.add(smtpUsernameField);		smtpPasswordField.setFieldLabel("SMTP password");		smtpPasswordField.setToolTip("Enter SMTP password");		smtpPasswordField.setEmptyText("Enter SMTP password");		smtpPasswordField.setAllowBlank(false);        smtpPasswordField.setPassword(true);		formPanel.add(smtpPasswordField);		formPanel.addButton(            new Button("Save", new SelectionListener<ButtonEvent>() {			public void componentSelected(ButtonEvent ce) {                save();			}		}));        		formPanel.addButton(            new Button("Cancel", new SelectionListener<ButtonEvent>() {			public void componentSelected(ButtonEvent ce) {				AccountDialog.this.hide();			}		}));    }    public void show() {        window.show();        DeferredCommand.addCommand(new Command() {            public void execute() {                window.toFront();            }        });    }    public void hide() {        window.hide();    }    private void save() {        JSONObject params = new JSONObject();        params.put("name", new JSONString(nameField.getValue()));                params.put("incoming_protocol", new JSONString("imap"));        params.put("incoming_server_address",                   new JSONString(imapAddressField.getValue()));        params.put("incoming_server_port",                   new JSONString(imapPortField.getValue().toString()));        params.put("incoming_username",                    new JSONString(imapUsernameField.getValue()));        params.put("incoming_password",                    new JSONString(imapPasswordField.getValue()));        params.put("outgoing_protocol", new JSONString("smtp"));        params.put("outgoing_server_address",                   new JSONString(smtpAddressField.getValue()));        params.put("outgoing_server_port",                   new JSONString(smtpPortField.getValue().toString()));        params.put("outgoing_username",                    new JSONString(smtpUsernameField.getValue()));        params.put("outgoing_password",                    new JSONString(smtpPasswordField.getValue()));        new SimpleJSON() {            public void onSuccess(JSONWrapper response) {                if (response.get("error").isNull()) {                    MessageBox.alert("Success!",                                     "Account created successfully!",                                     null);                    AccountDialog.this.hide();                    DeferredCommand.addCommand(onAccountCreated);                }                else {                    MessageBox.alert("Failure!",                                     response.get("error").stringValue(),                                     null);                }            }            public void onFailure() {                MessageBox.alert("Failure!",                    "Error occurred during communication with the server.",                    null);            }        }.query("/mail/accounts/create/", params.toString());    }}