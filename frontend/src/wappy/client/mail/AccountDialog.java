package wappy.client.mail;import com.extjs.gxt.ui.client.Style.HorizontalAlignment;import com.extjs.gxt.ui.client.event.ButtonEvent;import com.extjs.gxt.ui.client.event.SelectionListener;import com.extjs.gxt.ui.client.widget.MessageBox;import com.extjs.gxt.ui.client.widget.button.Button;import com.extjs.gxt.ui.client.widget.form.FormPanel;import com.extjs.gxt.ui.client.widget.form.TextField;import com.extjs.gxt.ui.client.widget.form.NumberField;import com.extjs.gxt.ui.client.widget.Window;import com.google.gwt.user.client.Command;import com.google.gwt.user.client.DeferredCommand;import com.google.gwt.http.client.RequestBuilder;import com.google.gwt.http.client.RequestCallback;import com.google.gwt.http.client.RequestException;import com.google.gwt.http.client.Request;import com.google.gwt.http.client.Response;import com.google.gwt.json.client.JSONParser;import com.google.gwt.json.client.JSONObject;import com.google.gwt.json.client.JSONString;import com.pathf.gwt.util.json.client.JSONWrapper;public class AccountDialog {    final Command onAccountCreated;    final Window window = new Window();    final FormPanel formPanel = new FormPanel();    final TextField<String> nameField = new TextField<String>();    final TextField<String> imapAddressField = new TextField<String>();    final NumberField imapPortField = new NumberField();    final TextField<String> imapUsernameField = new TextField<String>();    final TextField<String> imapPasswordField = new TextField<String>();    public AccountDialog(Command onAccountCreated) {        this.onAccountCreated = onAccountCreated;        window.setHeading("Mail Account");        window.setPlain(false);        window.setWidth(350);        window.setAutoHeight(true);        window.setResizable(false);		window.setModal(true);		window.setBlinkModal(true);		formPanel.setHeaderVisible(false);        formPanel.setButtonAlign(HorizontalAlignment.CENTER);		nameField.setFieldLabel("Account name");		nameField.setToolTip("Enter an account name");		nameField.setEmptyText("Enter an account name");		nameField.setAllowBlank(false);		formPanel.add(nameField);		imapAddressField.setFieldLabel("IMAP server address");		imapAddressField.setToolTip("Enter address of the IMAP server");		imapAddressField.setEmptyText("Enter address of the IMAP server");		imapAddressField.setAllowBlank(false);		formPanel.add(imapAddressField);		imapPortField.setFieldLabel("IMAP server port");		imapPortField.setToolTip("Enter port of the IMAP server");		imapPortField.setEmptyText("Enter port of the IMAP server");		imapPortField.setAllowBlank(false);		imapPortField.setAllowDecimals(false);		imapPortField.setAllowNegative(false);		formPanel.add(imapPortField);		imapUsernameField.setFieldLabel("IMAP username");		imapUsernameField.setToolTip("Enter imap username");		imapUsernameField.setEmptyText("Enter imap username");		imapUsernameField.setAllowBlank(false);		formPanel.add(imapUsernameField);		imapPasswordField.setFieldLabel("IMAP password");		imapPasswordField.setToolTip("Enter imap password");		imapPasswordField.setEmptyText("Enter imap password");		imapPasswordField.setAllowBlank(false);        imapPasswordField.setPassword(true);		formPanel.add(imapPasswordField);		formPanel.addButton(            new Button("Save", new SelectionListener<ButtonEvent>() {			public void componentSelected(ButtonEvent ce) {                save();			}		}));        		formPanel.addButton(            new Button("Cancel", new SelectionListener<ButtonEvent>() {			public void componentSelected(ButtonEvent ce) {				AccountDialog.this.hide();			}		}));        window.add(formPanel);    }    public void show() {        window.show();        DeferredCommand.addCommand(new Command() {            public void execute() {                window.toFront();            }        });    }    public void hide() {        window.hide();    }        private void save() {        JSONObject params = new JSONObject();        params.put("name", new JSONString(nameField.getValue()));        params.put("server_address",                   new JSONString(imapAddressField.getValue()));        params.put("server_port",                   new JSONString(imapPortField.getValue().toString()));        params.put("username", new JSONString(imapUsernameField.getValue()));        params.put("password", new JSONString(imapPasswordField.getValue()));        RequestBuilder builder = new RequestBuilder(RequestBuilder.POST,                                                    "/mail/accounts/create/");        try {            builder.sendRequest(params.toString(), new RequestCallback() {                public void onError(Request request, Throwable exception) {                    MessageBox.alert("Failure!",                        "Error occurred during communication with the server.",                        null);                }                public void onResponseReceived(Request request,                                               Response response) {                    if (response.getStatusCode() != 200) return;                    JSONWrapper root = new JSONWrapper(                        JSONParser.parse(response.getText()));                                        if (root.get("error").isNull()) {                        MessageBox.alert("Success!",                                         "Account created successfully!",                                         null);                        AccountDialog.this.hide();                        DeferredCommand.addCommand(onAccountCreated);                    }                    else {                        MessageBox.alert("Failure!",                                         root.get("error").stringValue(),                                         null);                    }                }            });        }        catch (RequestException e) {            MessageBox.alert("Failure!",                "Error occurred during communication with the server.", null);        }    }}